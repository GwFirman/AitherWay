// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    // output   = "../src/app/generated/prisma"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Maps {
    id           String   @id @default(uuid())
    nama         String   @unique
    slug         String   @unique
    rating       String
    deskripsi    String   @default("")
    alamat       String
    gambar       String
    longitude    Float
    latitude     Float
    harga        String   @default("")
    map_url      String   @default("")
    total_ulasan Int      @default(0)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    reviews Reviews[]
}

model Reviews {
    id        String   @id @default(uuid())
    nama      String
    rating    String
    komentar  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    maps   Maps   @relation(fields: [mapsId], references: [id], onDelete: Cascade)
    mapsId String
}

// model Conversations {
//     id        String   @id @default(uuid())
//     nama      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     messages Messages[]
// }

// model Messages {
//     id        String   @id @default(uuid())
//     name      String
//     sender    Sender   @default(user)
//     content   String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     Conversations   Conversations @relation(fields: [conversationsId], references: [id])
//     conversationsId String
// }

// enum Sender {
//     user
//     bot
// }
